.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH BUSYBOX 1 "version 0.50" "15/Mar/2001" "BusyBox"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.PP
.Vb 1
\& BusyBox <function> [arguments...]  # or
.Ve
.Vb 1
\& <function> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in fileutils, shellutils, findutils, textutils, grep, gzip,
tar, etc.  BusyBox provides a fairly complete POSIX environment for any small
or embedded system.  The utilities in BusyBox generally have fewer options than
their full-featured GNU cousins; however, the options that are included provide
the expected functionality and behave very much like their GNU counterparts. 
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time.  This makes it easy to customize your embedded
systems.  To create a working system, just add a kernel, a shell (such as ash),
and an editor (such as elvis-tiny or ae).
.SH "USAGE"
When you create a link to BusyBox for the function you wish to use, when BusyBox
is called using that link it will behave as if the command itself has been invoked.
.PP
For example, entering
.PP
.Vb 2
\&        ln -s ./BusyBox ls
\&        ./ls
.Ve
will cause BusyBox to behave as \*(L'ls\*(R' (if the \*(L'ls\*(R' command has been compiled
into BusyBox). 
.PP
You can also invoke BusyBox by issuing the command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        ./BusyBox ls
.Ve
will also cause BusyBox to behave as \*(L'ls\*(R'. 
.SH "COMMON OPTIONS"
Most BusyBox commands support the \fB--help\fR option to provide a
terse runtime description of their behavior. 
.SH "COMMANDS"
Currently defined functions include:
.PP
ar, basename, busybox, cat, chgrp, chmod, chown, chroot, chvt, clear, cmp, cp,
cut, date, dc, dd, deallocvt, df, dirname, dmesg, dos2unix, dpkg, dpkg-deb, du,
dumpkmap, dutmp, echo, expr, false, fbset, fdflush, find, free, freeramdisk,
fsck.minix, getopt, grep, gunzip, gzip, halt, head, hostid, hostname, id,
ifconfig, init, insmod, kill, killall, klogd, length, ln, loadacm, loadfont,
loadkmap, logger, logname, ls, lsmod, makedevs, md5sum, mkdir, mkfifo,
mkfs.minix, mknod, mkswap, mktemp, more, mount, mt, mv, nc, nslookup, ping,
pivot_root, poweroff, printf, ps, pwd, rdate, readlink, reboot, renice, reset,
rm, rmdir, rmmod, route, rpmunpack, sed, setkeycodes, sh, sleep, sort, stty,
swapoff, swapon, sync, syslogd, tail, tar, tee, telnet, test, tftp, touch, tr,
true, tty, umount, uname, uniq, unix2dos, update, uptime, usleep, uudecode,
uuencode, watchdog, wc, wget, which, whoami, xargs, yes, zcat, [
.Ip "\fIar\fR" 4
ar \-[ovR]{ptx} archive filenames
.Sp
Extract or list files from an ar archive.
.Sp
Options:
.Sp
.Vb 6
\&        -o              preserve original dates
\&        -p              extract to stdout
\&        -t              list
\&        -x              extract
\&        -v              verbosely list files processed
\&        -R              recursive action
.Ve
-------------------------------
.Ip "\fIbasename\fR" 4
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strips directory path and suffixes from \s-1FILE\s0.
If specified, also removes any trailing \s-1SUFFIX\s0.
.Sp
Example:
.Sp
.Vb 6
\&        $ basename /usr/local/bin/foo
\&        foo
\&        $ basename /usr/local/bin/
\&        bin
\&        $ basename /foo/bar.txt .txt
\&        bar
.Ve
-------------------------------
.Ip "\fIcat\fR" 4
cat [\s-1FILE\s0]...
.Sp
Concatenates \fI\s-1FILE\s0\fR\|(s) and prints them to stdout.
.Sp
Example:
.Sp
.Vb 2
\&        $ cat /proc/uptime
\&        110716.72 17.67
.Ve
-------------------------------
.Ip "\fIchgrp\fR" 4
chgrp [\s-1OPTION\s0]... \s-1GROUP\s0 \s-1FILE\s0...
.Sp
Change the group membership of each \s-1FILE\s0 to \s-1GROUP\s0.
.Sp
Options:
.Sp
.Vb 1
\&        -R      Changes files and directories recursively.
.Ve
Example:
.Sp
.Vb 5
\&        $ ls -l /tmp/foo
\&        -r--r--r--    1 andersen andersen        0 Apr 12 18:25 /tmp/foo
\&        $ chgrp root /tmp/foo
\&        $ ls -l /tmp/foo
\&        -r--r--r--    1 andersen root            0 Apr 12 18:25 /tmp/foo
.Ve
-------------------------------
.Ip "\fIchmod\fR" 4
chmod [\fB\-R\fR] \s-1MODE\s0[,\s-1MODE\s0]... \s-1FILE\s0...
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst.
.Sp
Options:
.Sp
.Vb 1
\&        -R      Changes files and directories recursively.
.Ve
Example:
.Sp
.Vb 8
\&        $ ls -l /tmp/foo
\&        -rw-rw-r--    1 root     root            0 Apr 12 18:25 /tmp/foo
\&        $ chmod u+x /tmp/foo
\&        $ ls -l /tmp/foo
\&        -rwxrw-r--    1 root     root            0 Apr 12 18:25 /tmp/foo*
\&        $ chmod 444 /tmp/foo
\&        $ ls -l /tmp/foo
\&        -r--r--r--    1 root     root            0 Apr 12 18:25 /tmp/foo
.Ve
-------------------------------
.Ip "\fIchown\fR" 4
chown [\s-1OPTION\s0]...  \s-1OWNER\s0[<.|:>[\s-1GROUP\s0] \s-1FILE\s0...
.Sp
Change the owner and/or group of each \s-1FILE\s0 to \s-1OWNER\s0 and/or \s-1GROUP\s0.
.Sp
Options:
.Sp
.Vb 1
\&        -R      Changes files and directories recursively.
.Ve
Example:
.Sp
.Vb 8
\&        $ ls -l /tmp/foo
\&        -r--r--r--    1 andersen andersen        0 Apr 12 18:25 /tmp/foo
\&        $ chown root /tmp/foo
\&        $ ls -l /tmp/foo
\&        -r--r--r--    1 root     andersen        0 Apr 12 18:25 /tmp/foo
\&        $ chown root.root /tmp/foo
\&        ls -l /tmp/foo
\&        -r--r--r--    1 root     root            0 Apr 12 18:25 /tmp/foo
.Ve
-------------------------------
.Ip "\fIchroot\fR" 4
chroot \s-1NEWROOT\s0 [\s-1COMMAND\s0...]
.Sp
Run \s-1COMMAND\s0 with root directory set to \s-1NEWROOT\s0.
.Sp
Example:
.Sp
.Vb 6
\&        $ ls -l /bin/ls
\&        lrwxrwxrwx    1 root     root          12 Apr 13 00:46 /bin/ls -> /BusyBox
\&        $ mount /dev/hdc1 /mnt -t minix
\&        $ chroot /mnt
\&        $ ls -l /bin/ls
\&        -rwxr-xr-x    1 root     root        40816 Feb  5 07:45 /bin/ls*
.Ve
-------------------------------
.Ip "\fIchvt\fR" 4
chvt N
.Sp
Changes the foreground virtual terminal to /dev/ttyN
.Sp
-------------------------------
.Ip "\fIclear\fR" 4
clear 
.Sp
Clear screen.
.Sp
-------------------------------
.Ip "\fIcmp\fR" 4
cmp \s-1FILE1\s0 [\s-1FILE2\s0]
.Sp
Compare files.
.Sp
-------------------------------
.Ip "\fIcp\fR" 4
cp [\s-1OPTION\s0]... \s-1SOURCE\s0 \s-1DEST\s0
.Sp
Copies \s-1SOURCE\s0 to \s-1DEST\s0, or multiple \fI\s-1SOURCE\s0\fR\|(s) to \s-1DIRECTORY\s0.
.Sp
.Vb 5
\&        -a      Same as -dpR
\&        -d      Preserves links
\&        -p      Preserves file attributes if possible
\&        -f      force (implied; ignored) - always set
\&        -R      Copies directories recursively
.Ve
-------------------------------
.Ip "\fIcut\fR" 4
cut [\s-1OPTION\s0]... [\s-1FILE\s0]...
.Sp
Prints selected fields from each input \s-1FILE\s0 to standard output.
.Sp
Options:
.Sp
.Vb 6
\&        -b LIST         Output only bytes from LIST
\&        -c LIST         Output only characters from LIST
\&        -d CHAR         Use CHAR instead of tab as the field delimiter
\&        -s              Output only the lines containing delimiter
\&        -f N            Print only these fields
\&        -n              Ignored
.Ve
Example:
.Sp
.Vb 4
\&        $ echo Hello world | cut -f 1 -d ' '
\&        Hello
\&        $ echo Hello world | cut -f 2 -d ' '
\&        world
.Ve
-------------------------------
.Ip "\fIdate\fR" 4
date [\s-1OPTION\s0]... [+\s-1FORMAT\s0]
.Sp
Displays the current time in the given \s-1FORMAT\s0, or sets the system date.
.Sp
Options:
.Sp
.Vb 4
\&        -R              Outputs RFC-822 compliant date string
\&        -d STRING       display time described by STRING, not `now'
\&        -s              Sets time described by STRING
\&        -u              Prints or sets Coordinated Universal Time
.Ve
Example:
.Sp
.Vb 2
\&        $ date
\&        Wed Apr 12 18:52:41 MDT 2000
.Ve
-------------------------------
.Ip "\fIdc\fR" 4
dc expression ...
.Sp
This is a Tiny \s-1RPN\s0 calculator that understands the
following operations: +, \-, /, *, and, or, not, eor.
i.e. \*(L'dc 2 2 add\*(R' \-> 4, and \*(L'dc 8 8 \e* 2 2 + /\*(R' \-> 16
.Sp
Example:
.Sp
.Vb 10
\&        $ dc 2 2 +
\&        4
\&        $ dc 8 8 * 2 2 + /
\&        16
\&        $ dc 0 1 and
\&        0
\&        $ dc 0 1 or
\&        1
\&        $ echo 72 9 div 8 mul | dc
\&        64
.Ve
-------------------------------
.Ip "\fIdd\fR" 4
dd [if=\s-1FILE\s0] [of=\s-1FILE\s0] [bs=N] [count=N] [skip=N]
	  [seek=N] [conv=notrunc|sync]
.Sp
Copy a file, converting and formatting according to options
.Sp
.Vb 8
\&        if=FILE         read from FILE instead of stdin
\&        of=FILE         write to FILE instead of stdout
\&        bs=N            read and write N bytes at a time
\&        count=N         copy only N input blocks
\&        skip=N          skip N input blocks
\&        seek=N          skip N output blocks
\&        conv=notrunc    don't truncate output file
\&        conv=sync       pad blocks with zeros
.Ve
Numbers may be suffixed by c (x1), w (x2), b (x512), kD (x1000), k (x1024),
\s-1MD\s0 (x1000000), M (x1048576), \s-1GD\s0 (x1000000000) or G (x1073741824).
.Sp
Example:
.Sp
.Vb 3
\&        $ dd if=/dev/zero of=/dev/ram1 bs=1M count=4
\&        4+0 records in
\&        4+0 records out
.Ve
-------------------------------
.Ip "\fIdeallocvt\fR" 4
deallocvt N
.Sp
Deallocate unused virtual terminal /dev/ttyN
.Sp
-------------------------------
.Ip "\fIdf\fR" 4
df [\fB\-hmk\fR] [filesystem ...]
.Sp
Print the filesystem space used and space available.
.Sp
Options:
.Sp
.Vb 3
\&        -h      print sizes in human readable format (e.g., 1K 243M 2G )
\&        -m      print sizes in megabytes
\&        -k      print sizes in kilobytes(default) 
.Ve
Example:
.Sp
.Vb 7
\&        $ df
\&        Filesystem           1k-blocks      Used Available Use% Mounted on
\&        /dev/sda3              8690864   8553540    137324  98% /
\&        /dev/sda1                64216     36364     27852  57% /boot
\&        $ df /dev/sda3
\&        Filesystem           1k-blocks      Used Available Use% Mounted on
\&        /dev/sda3              8690864   8553540    137324  98% /
.Ve
-------------------------------
.Ip "\fIdirname\fR" 4
dirname [\s-1FILENAME\s0 ...]
.Sp
Strips non-directory suffix from \s-1FILENAME\s0
.Sp
Example:
.Sp
.Vb 4
\&        $ dirname /tmp/foo
\&        /tmp
\&        $ dirname /tmp/foo/
\&        /tmp
.Ve
-------------------------------
.Ip "\fIdmesg\fR" 4
dmesg [\fB\-c\fR] [\fB\-n\fR \s-1LEVEL\s0] [\fB\-s\fR \s-1SIZE\s0]
.Sp
Prints or controls the kernel ring buffer
.Sp
Options:
.Sp
.Vb 3
\&        -c              Clears the ring buffer's contents after printing
\&        -n LEVEL        Sets console logging level
\&        -s SIZE         Use a buffer of size SIZE
.Ve
-------------------------------
.Ip "\fIdos2unix\fR" 4
dos2unix [option] [file]
.Sp
Converts a text file to/from dos format to unix format.
.Sp
Options:
.Sp
.Vb 2
\&        -u      output will be in UNIX format
\&        -d      output will be in DOS format
.Ve
- when no option is given then input format will be automaticaly detected
.Sp
.Vb 2
\&  and converted to the oposite format on output
\&- when no file is given, then stdin is used as input and stdout as output
.Ve
-------------------------------
.Ip "\fIdpkg\fR" 4
dpkg [\fB\-i\fR|\fB\-r\fR|\-\fB\-unpack\fR|\-\fB\-configure\fR] my.deb
.Sp
\s-1WORK\s0 \s-1IN\s0 \s-1PROGRESS\s0, only usefull for debian-installer
.Sp
-------------------------------
.Ip "\fIdpkg_deb\fR" 4
dpkg_deb [\fB\-cexX\fR] file directory
.Sp
Perform actions on debian packages (.debs)
.Sp
Options:
.Sp
.Vb 5
\&        -c      List contents of filesystem tree (verbose)
\&        -l      List contents of filesystem tree (.list format)
\&        -e      Extract control files to directory
\&        -x      Exctract packages filesystem tree to directory
\&        -X      Verbose extract
.Ve
Example:
.Sp
.Vb 1
\&        $ dpkg-deb -X ./busybox_0.48-1_i386.deb /tmp
.Ve
-------------------------------
.Ip "\fIdu\fR" 4
du [\fB\-lshmk\fR] [\s-1FILE\s0]...
.Sp
Summarizes disk space used for each \s-1FILE\s0 and/or directory.
Disk space is printed in units of 1024 bytes.
.Sp
Options:
.Sp
.Vb 5
\&        -l      count sizes many times if hard linked
\&        -s      display only a total for each argument
\&        -h      print sizes in human readable format (e.g., 1K 243M 2G )
\&        -m      print sizes in megabytes
\&        -k      print sizes in kilobytes(default) 
.Ve
Example:
.Sp
.Vb 11
\&        $ du
\&        16      ./CVS
\&        12      ./kernel-patches/CVS
\&        80      ./kernel-patches
\&        12      ./tests/CVS
\&        36      ./tests
\&        12      ./scripts/CVS
\&        16      ./scripts
\&        12      ./docs/CVS
\&        104     ./docs
\&        2417    .
.Ve
-------------------------------
.Ip "\fIdumpkmap\fR" 4
dumpkmap > keymap
.Sp
Prints out a binary keyboard translation table to standard output.
.Sp
Example:
.Sp
.Vb 1
\&        $ dumpkmap > keymap
.Ve
-------------------------------
.Ip "\fIdutmp\fR" 4
dutmp [\s-1FILE\s0]
.Sp
Dump utmp file format (pipe delimited) from \s-1FILE\s0
or stdin to stdout.  (i.e. \*(L'dutmp /var/run/utmp')
.Sp
Example:
.Sp
.Vb 8
\&        $ dutmp /var/run/utmp
\&        8|7||si|||0|0|0|955637625|760097|0
\&        2|0|~|~~|reboot||0|0|0|955637625|782235|0
\&        1|20020|~|~~|runlevel||0|0|0|955637625|800089|0
\&        8|125||l4|||0|0|0|955637629|998367|0
\&        6|245|tty1|1|LOGIN||0|0|0|955637630|998974|0
\&        6|246|tty2|2|LOGIN||0|0|0|955637630|999498|0
\&        7|336|pts/0|vt00andersen|andersen|:0.0|0|0|0|955637763|0|0
.Ve
-------------------------------
.Ip "\fIecho\fR" 4
echo [\fB\-neE\fR] [\s-1ARG\s0 ...]
.Sp
Prints the specified ARGs to stdout
.Sp
Options:
.Sp
.Vb 3
\&        -n      suppress trailing newline
\&        -e      interpret backslash-escaped characters (i.e. \et=tab etc)
\&        -E      disable interpretation of backslash-escaped characters
.Ve
Example:
.Sp
.Vb 14
\&        $ echo Erik is cool
\&        Erik is cool
\&        $  echo -e Erik
\&        is
\&        cool
\&        Erik
\&        is
\&        cool
\&        $ echo Erik
\&        is
\&        cool
\&        Erik
\&        is
\&        cool
.Ve
-------------------------------
.Ip "\fIexpr\fR" 4
expr \s-1EXPRESSION\s0
.Sp
Prints the value of \s-1EXPRESSION\s0 to standard output.
.Sp
\s-1EXPRESSION\s0 may be:
.Sp
.Vb 23
\&        ARG1 |  ARG2    ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 &  ARG2    ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 <  ARG2    ARG1 is less than ARG2
\&        ARG1 <= ARG2    ARG1 is less than or equal to ARG2
\&        ARG1 =  ARG2    ARG1 is equal to ARG2
\&        ARG1 != ARG2    ARG1 is unequal to ARG2
\&        ARG1 >= ARG2    ARG1 is greater than or equal to ARG2
\&        ARG1 >  ARG2    ARG1 is greater than ARG2
\&        ARG1 +  ARG2    arithmetic sum of ARG1 and ARG2
\&        ARG1 -  ARG2    arithmetic difference of ARG1 and ARG2
\&        ARG1 *  ARG2    arithmetic product of ARG1 and ARG2
\&        ARG1 /  ARG2    arithmetic quotient of ARG1 divided by ARG2
\&        ARG1 %  ARG2    arithmetic remainder of ARG1 divided by ARG2
\&        STRING : REGEXP             anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP         same as STRING : REGEXP
\&        substr STRING POS LENGTH    substring of STRING, POS counted from 1
\&        index STRING CHARS          index in STRING where any CHARS is found,
\&                                    or 0
\&        length STRING               length of STRING
\&        quote TOKEN                 interpret TOKEN as a string, even if
\&                                    it is a keyword like `match' or an
\&                                    operator like `/'
\&        ( EXPRESSION )              value of EXPRESSION
.Ve
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical.  Pattern matches return the string matched between 
\e( and \e) or null; if \e( and \e) are not used, they return the number 
of characters matched or 0.
.Sp
-------------------------------
.Ip "\fIfalse\fR" 4
false 
.Sp
Return an exit code of \s-1FALSE\s0 (1).
.Sp
Example:
.Sp
.Vb 3
\&        $ false
\&        $ echo $?
\&        1
.Ve
-------------------------------
.Ip "\fIfbset\fR" 4
fbset [options] [mode]
.Sp
Show and modify frame buffer settings
.Sp
Example:
.Sp
.Vb 7
\&        $ fbset
\&        mode 1024x768-76
\&                        geometry 1024 768 1024 768 16
\&                timings 12714 128 32 16 4 128 4
\&                accel false
\&                rgba 5/11,6/5,5/0,0/0
\&        endmode
.Ve
-------------------------------
.Ip "\fIfdflush\fR" 4
fdflush \s-1DEVICE\s0
.Sp
Forces floppy disk drive to detect disk change
.Sp
-------------------------------
.Ip "\fIfind\fR" 4
find [\s-1PATH\s0...] [\s-1EXPRESSION\s0]
.Sp
Search for files in a directory hierarchy.  The default \s-1PATH\s0 is
the current directory; default \s-1EXPRESSION\s0 is \*(L'\fB\-print\fR\*(R'
.Sp
\s-1EXPRESSION\s0 may consist of:
.Sp
.Vb 7
\&        -follow         Dereference symbolic links.
\&        -name PATTERN   File name (leading directories removed) matches PATTERN.
\&        -type X         Filetype matches X (where X is one of: f,d,l,b,c,...)
\&        -perm PERMS     Permissions match any of (+NNN); all of (-NNN);
\&                        or exactly (NNN)
\&        -mtime TIME     Modified time is greater than (+N); less than (-N);
\&                        or exactly (N) days
.Ve
Example:
.Sp
.Vb 2
\&        $ find / -name /etc/passwd
\&        /etc/passwd
.Ve
-------------------------------
.Ip "\fIfree\fR" 4
free 
.Sp
Displays the amount of free and used system memory
.Sp
Example:
.Sp
.Vb 6
\&        $ free
\&                      total         used         free       shared      buffers
\&          Mem:       257628       248724         8904        59644        93124
\&         Swap:       128516         8404       120112
\&        Total:       386144       257128       129016
\&         
.Ve
-------------------------------
.Ip "\fIfreeramdisk\fR" 4
freeramdisk \s-1DEVICE\s0
.Sp
Frees all memory used by the specified ramdisk.
.Sp
Example:
.Sp
.Vb 1
\&        $ freeramdisk /dev/ram2
.Ve
-------------------------------
.Ip "\fIfsck_minix\fR" 4
fsck_minix [\fB\-larvsmf\fR] /dev/name
.Sp
Performs a consistency check for \s-1MINIX\s0 filesystems.
.Sp
Options:
.Sp
.Vb 7
\&        -l      Lists all filenames
\&        -r      Perform interactive repairs
\&        -a      Perform automatic repairs
\&        -v      verbose
\&        -s      Outputs super-block information
\&        -m      Activates MINIX-like mode not cleared warnings
\&        -f      Force file system check.
.Ve
-------------------------------
.Ip "\fIgetopt\fR" 4
getopt [\s-1OPTIONS\s0]...
.Sp
Parse command options
.Sp
.Vb 9
\&        -a, --alternative               Allow long options starting with single -
\&        -l, --longoptions=longopts      Long options to be recognized
\&        -n, --name=progname             The name under which errors are reported
\&        -o, --options=optstring Short options to be recognized
\&        -q, --quiet                     Disable error reporting by getopt(3)
\&        -Q, --quiet-output              No normal output
\&        -s, --shell=shell               Set shell quoting conventions
\&        -T, --test                      Test for getopt(1) version
\&        -u, --unqote                    Do not quote the output
.Ve
Example:
.Sp
.Vb 18
\&        $ cat getopt.test
\&        GETOPT=`getopt -o ab:c:: --long a-long,b-long:,c-long:: \e
\&               -n 'example.busybox' -- $@`
\&        if [ $? != 0 ] ; then  exit 1 ; fi
\&        eval set -- $GETOPT
\&        while true ; do
\&         case $1 in
\&           -a|--a-long) echo Option a ; shift ;;
\&           -b|--b-long) echo Option b, argument `$2' ; shift 2 ;;
\&           -c|--c-long)
\&             case $2 in
\&               \e) echo Option c, no argument; shift 2 ;;
\&               *)  echo Option c, argument `$2' ; shift 2 ;;
\&             esac ;;
\&           --) shift ; break ;;
\&           *) echo Internal error! ; exit 1 ;;
\&         esac
\&        done
.Ve
-------------------------------
.Ip "\fIgrep\fR" 4
grep [\fB\-ihHnqvs\fR] pattern [files...]
.Sp
Search for \s-1PATTERN\s0 in each \s-1FILE\s0 or standard input.
.Sp
Options:
.Sp
.Vb 7
\&        -H      prefix output lines with filename where match was found
\&        -h      suppress the prefixing filename on output
\&        -i      ignore case distinctions
\&        -n      print line number with output lines
\&        -q      be quiet. Returns 0 if result was found, 1 otherwise
\&        -v      select non-matching lines
\&        -s      suppress file open/read error messages
.Ve
Example:
.Sp
.Vb 4
\&        $ grep root /etc/passwd
\&        root:x:0:0:root:/root:/bin/bash
\&        $ grep ^[rR]oo. /etc/passwd
\&        root:x:0:0:root:/root:/bin/bash
.Ve
-------------------------------
.Ip "\fIgunzip\fR" 4
gunzip [\s-1OPTION\s0]... \s-1FILE\s0
.Sp
Uncompress \s-1FILE\s0 (or standard input if \s-1FILE\s0 is \*(L'\-').
.Sp
Options:
.Sp
.Vb 2
\&        -c      Write output to standard output
\&        -t      Test compressed file integrity
.Ve
Example:
.Sp
.Vb 5
\&        $ ls -la /tmp/BusyBox*
\&        -rw-rw-r--    1 andersen andersen   557009 Apr 11 10:55 /tmp/BusyBox-0.43.tar.gz
\&        $ gunzip /tmp/BusyBox-0.43.tar.gz
\&        $ ls -la /tmp/BusyBox*
\&        -rw-rw-r--    1 andersen andersen  1761280 Apr 14 17:47 /tmp/BusyBox-0.43.tar
.Ve
-------------------------------
.Ip "\fIgzip\fR" 4
gzip [\s-1OPTION\s0]... \s-1FILE\s0
.Sp
Compress \s-1FILE\s0 with maximum compression.
When \s-1FILE\s0 is \*(L'\-\*(R', reads standard input.  Implies \fB\-c\fR.
.Sp
Options:
.Sp
.Vb 2
\&        -c      Write output to standard output instead of FILE.gz
\&        -d      decompress
.Ve
Example:
.Sp
.Vb 5
\&        $ ls -la /tmp/BusyBox*
\&        -rw-rw-r--    1 andersen andersen  1761280 Apr 14 17:47 /tmp/BusyBox-0.43.tar
\&        $ gzip /tmp/BusyBox-0.43.tar
\&        $ ls -la /tmp/BusyBox*
\&        -rw-rw-r--    1 andersen andersen   554058 Apr 14 17:49 /tmp/BusyBox-0.43.tar.gz
.Ve
-------------------------------
.Ip "\fIhalt\fR" 4
halt 
.Sp
Halt the system.
.Sp
-------------------------------
.Ip "\fIhead\fR" 4
head [\s-1OPTION\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 to standard output.
With more than one \s-1FILE\s0, precede each with a header giving the
file name. With no \s-1FILE\s0, or when \s-1FILE\s0 is \-, read standard input.
.Sp
Options:
.Sp
.Vb 1
\&        -n NUM          Print first NUM lines instead of first 10
.Ve
Example:
.Sp
.Vb 3
\&        $ head -n 2 /etc/passwd
\&        root:x:0:0:root:/root:/bin/bash
\&        daemon:x:1:1:daemon:/usr/sbin:/bin/sh
.Ve
-------------------------------
.Ip "\fIhostid\fR" 4
hostid 
.Sp
Print out a unique 32-bit identifier for the machine.
.Sp
-------------------------------
.Ip "\fIhostname\fR" 4
hostname [\s-1OPTION\s0] {hostname | \fB\-F\fR file}
.Sp
Get or set the hostname or \s-1DNS\s0 domain name. If a hostname is given
(or a file with the \fB\-F\fR parameter), the host name will be set.
.Sp
Options:
.Sp
.Vb 4
\&        -s              Short
\&        -i              Addresses for the hostname
\&        -d              DNS domain name
\&        -F, --file FILE Use the contents of FILE to specify the hostname
.Ve
Example:
.Sp
.Vb 2
\&        $ hostname
\&        slag 
.Ve
-------------------------------
.Ip "\fIid\fR" 4
id [\s-1OPTIONS\s0]... [\s-1USERNAME\s0]
.Sp
Print information for \s-1USERNAME\s0 or the current user
.Sp
Options:
.Sp
.Vb 4
\&        -g      prints only the group ID
\&        -u      prints only the user ID
\&        -n      print a name instead of a number (with for -ug)
\&        -r      prints the real user ID instead of the effective ID (with -ug)
.Ve
Example:
.Sp
.Vb 2
\&        $ id
\&        uid=1000(andersen) gid=1000(andersen)
.Ve
-------------------------------
.Ip "\fIifconfig\fR" 4
ifconfig [\fB\-a\fR] <interface> [<address>]
.Sp
configure a network interface
.Sp
Options:
.Sp
.Vb 8
\&        [[-]broadcast [<address>]]  [[-]pointopoint [<address>]]
\&        [netmask <address>]  [dstaddr <address>]
\&        [outfill <NN>] [keepalive <NN>]
\&        [hw ether <address>]  [metric <NN>]  [mtu <NN>]
\&        [[-]trailers]  [[-]arp]  [[-]allmulti]
\&        [multicast]  [[-]promisc]  [txqueuelen <NN>]  [[-]dynamic]
\&        [mem_start <NN>]  [io_addr <NN>]  [irq <NN>]
\&        [up|down] ...
.Ve
-------------------------------
.Ip "\fIinit\fR" 4
init 
.Sp
Init is the parent of all processes.
.Sp
This version of init is designed to be run only by the kernel.
.Sp
BusyBox init doesn't support multiple runlevels.  The runlevels field of
the /etc/inittab file is completely ignored by BusyBox init. If you want 
runlevels, use sysvinit.
.Sp
BusyBox init works just fine without an inittab.  If no inittab is found, 
it has the following default behavior:
.Sp
.Vb 2
\&        ::sysinit:/etc/init.d/rcS
\&        ::askfirst:/bin/sh
.Ve
if it detects that /dev/console is _not_ a serial console, it will also run:
.Sp
.Vb 1
\&        tty2::askfirst:/bin/sh
.Ve
If you choose to use an /etc/inittab file, the inittab entry format is as follows:
.Sp
.Vb 1
\&        <id>:<runlevels>:<action>:<process>
.Ve
.Vb 1
\&        <id>: 
.Ve
.Vb 10
\&                WARNING: This field has a non-traditional meaning for BusyBox init!
\&                The id field is used by BusyBox init to specify the controlling tty for
\&                the specified process to run on.  The contents of this field are
\&                appended to /dev/ and used as-is.  There is no need for this field to
\&                be unique, although if it isn't you may have strange results.  If this
\&                field is left blank, the controlling tty is set to the console.  Also
\&                note that if BusyBox detects that a serial console is in use, then only
\&                entries whose controlling tty is either the serial console or /dev/null
\&                will be run.  BusyBox init does nothing with utmp.  We don't need no
\&                stinkin' utmp.
.Ve
.Vb 1
\&        <runlevels>: 
.Ve
.Vb 1
\&                The runlevels field is completely ignored.
.Ve
.Vb 1
\&        <action>: 
.Ve
.Vb 2
\&                Valid actions include: sysinit, respawn, askfirst, wait, 
\&                once, and ctrlaltdel.
.Ve
.Vb 3
\&                The available actions can be classified into two groups: actions
\&                that are run only once, and actions that are re-run when the specified
\&                process exits.
.Ve
.Vb 1
\&                Run only-once actions:
.Ve
.Vb 9
\&                        'sysinit' is the first item run on boot.  init waits until all
\&                        sysinit actions are completed before continuing.  Following the
\&                        completion of all sysinit actions, all 'wait' actions are run.
\&                        'wait' actions, like  'sysinit' actions, cause init to wait until
\&                        the specified task completes.  'once' actions are asyncronous,
\&                        therefore, init does not wait for them to complete.  'ctrlaltdel'
\&                        actions are run immediately before init causes the system to reboot
\&                        (unmounting filesystems with a 'ctrlaltdel' action is a very good
\&                        idea).
.Ve
.Vb 1
\&                Run repeatedly actions:
.Ve
.Vb 8
\&                        'respawn' actions are run after the 'once' actions.  When a process
\&                        started with a 'respawn' action exits, init automatically restarts
\&                        it.  Unlike sysvinit, BusyBox init does not stop processes from
\&                        respawning out of control.  The 'askfirst' actions acts just like
\&                        respawn, except that before running the specified process it
\&                        displays the line Please press Enter to activate this console.
\&                        and then waits for the user to press enter before starting the
\&                        specified process.  
.Ve
.Vb 3
\&                Unrecognized actions (like initdefault) will cause init to emit an
\&                error message, and then go along with its business.  All actions are
\&                run in the reverse order from how they appear in /etc/inittab.
.Ve
.Vb 1
\&        <process>: 
.Ve
.Vb 1
\&                Specifies the process to be executed and it's command line.
.Ve
Example /etc/inittab file:
.Sp
.Vb 14
\&        ::sysinit:/etc/init.d/rcS
\&        
\&        ::askfirst:-/bin/sh
\&        tty2::askfirst:-/bin/sh
\&        tty3::askfirst:-/bin/sh
\&        tty4::askfirst:-/bin/sh
\&        
\&        tty4::respawn:/sbin/getty 38400 tty5
\&        tty5::respawn:/sbin/getty 38400 tty6
\&        
\&        
\&        
\&        ::ctrlaltdel:/bin/umount -a -r
\&        ::ctrlaltdel:/sbin/swapoff -a
.Ve
-------------------------------
.Ip "\fIinsmod\fR" 4
insmod [\s-1OPTION\s0]... \s-1MODULE\s0 [symbol=value]...
.Sp
Loads the specified kernel modules into the kernel.
.Sp
Options:
.Sp
.Vb 5
\&        -f      Force module to load into the wrong kernel version.
\&        -k      Make module autoclean-able.
\&        -v      verbose output
\&        -L      Lock to prevent simultaneous loads of a module
\&        -x      do not export externs
.Ve
-------------------------------
.Ip "\fIkill\fR" 4
kill [\fB\-signal\fR] process-id [process-id ...]
.Sp
Send a signal (default is \s-1SIGTERM\s0) to the specified \fIprocess\fR\|(es).
.Sp
Options:
.Sp
.Vb 1
\&        -l      List all signal names and numbers.
.Ve
Example:
.Sp
.Vb 8
\&        $ ps | grep apache
\&        252 root     root     S [apache]
\&        263 www-data www-data S [apache]
\&        264 www-data www-data S [apache]
\&        265 www-data www-data S [apache]
\&        266 www-data www-data S [apache]
\&        267 www-data www-data S [apache]
\&        $ kill 252
.Ve
-------------------------------
.Ip "\fIkillall\fR" 4
killall [\fB\-signal\fR] process-name [process-name ...]
.Sp
Send a signal (default is \s-1SIGTERM\s0) to the specified \fIprocess\fR\|(es).
.Sp
Options:
.Sp
.Vb 1
\&        -l      List all signal names and numbers.
.Ve
Example:
.Sp
.Vb 2
\&        $ killall apache
\&         
.Ve
-------------------------------
.Ip "\fIklogd\fR" 4
klogd \fB\-n\fR
.Sp
Kernel logger.
Options:
.Sp
.Vb 1
\&        -n      Run as a foreground process.
.Ve
-------------------------------
.Ip "\fIlength\fR" 4
length \s-1STRING\s0
.Sp
Prints out the length of the specified \s-1STRING\s0.
.Sp
Example:
.Sp
.Vb 2
\&        $ length Hello
\&        5
.Ve
-------------------------------
.Ip "\fIln\fR" 4
ln [\s-1OPTION\s0] \s-1TARGET\s0... \s-1LINK_NAME\s0|\s-1DIRECTORY\s0
.Sp
Create a link named \s-1LINK_NAME\s0 or \s-1DIRECTORY\s0 to the specified \s-1TARGET\s0
.Sp
You may use \*(L'--\*(R' to indicate that all following arguments are non-options.
.Sp
Options:
.Sp
.Vb 3
\&        -s      make symbolic links instead of hard links
\&        -f      remove existing destination files
\&        -n      no dereference symlinks - treat like normal file
.Ve
Example:
.Sp
.Vb 4
\&        $ ln -s BusyBox /tmp/ls
\&        $ ls -l /tmp/ls
\&        lrwxrwxrwx    1 root     root            7 Apr 12 18:39 ls -> BusyBox*
\&         
.Ve
-------------------------------
.Ip "\fIloadacm\fR" 4
loadacm < mapfile
.Sp
Loads an acm from standard input.
.Sp
Example:
.Sp
.Vb 2
\&        $ loadacm < /etc/i18n/acmname
\&         
.Ve
-------------------------------
.Ip "\fIloadfont\fR" 4
loadfont < font
.Sp
Loads a console font from standard input.
.Sp
Example:
.Sp
.Vb 2
\&        $ loadfont < /etc/i18n/fontname
\&         
.Ve
-------------------------------
.Ip "\fIloadkmap\fR" 4
loadkmap < keymap
.Sp
Loads a binary keyboard translation table from standard input.
.Sp
Example:
.Sp
.Vb 2
\&        $ loadkmap < /etc/i18n/lang-keymap
\&         
.Ve
-------------------------------
.Ip "\fIlogger\fR" 4
logger [\s-1OPTION\s0]... [\s-1MESSAGE\s0]
.Sp
Write \s-1MESSAGE\s0 to the system log.  If \s-1MESSAGE\s0 is omitted, log stdin.
.Sp
Options:
.Sp
.Vb 4
\&        -s      Log to stderr as well as the system log.
\&        -t      Log using the specified tag (defaults to user name).
\&        -p      Enter the message with the specified priority.
\&                This may be numerical or a ``facility.level'' pair.
.Ve
Example:
.Sp
.Vb 2
\&        $ logger hello
\&         
.Ve
-------------------------------
.Ip "\fIlogname\fR" 4
logname 
.Sp
Print the name of the current user.
.Sp
Example:
.Sp
.Vb 3
\&        $ logname
\&        root
\&         
.Ve
-------------------------------
.Ip "\fIlogread\fR" 4
logread 
.Sp
Shows the messages from syslogd (using circular buffer).
.Sp
-------------------------------
.Ip "\fIls\fR" 4
ls [\fB\-1AacCdeFilnpLRrSsTtuvwxXhk\fR] [filenames...]
.Sp
List directory contents
.Sp
Options:
.Sp
.Vb 26
\&        -1      list files in a single column
\&        -A      do not list implied . and ..
\&        -a      do not hide entries starting with .
\&        -C      list entries by columns
\&        -c      with -l: show ctime
\&        -d      list directory entries instead of contents
\&        -e      list both full date and full time
\&        -F      append indicator (one of */=@|) to entries
\&        -i      list the i-node for each file
\&        -l      use a long listing format
\&        -n      list numeric UIDs and GIDs instead of names
\&        -p      append indicator (one of /=@|) to entries
\&        -L      list entries pointed to by symbolic links
\&        -R      list subdirectories recursively
\&        -r      sort the listing in reverse order
\&        -S      sort the listing by file size
\&        -s      list the size of each file, in blocks
\&        -T NUM  assume Tabstop every NUM columns
\&        -t      with -l: show modification time
\&        -u      with -l: show access time
\&        -v      sort the listing by version
\&        -w NUM  assume the terminal is NUM columns wide
\&        -x      list entries by lines instead of by columns
\&        -X      sort the listing by extension
\&        -h      print sizes in human readable format (e.g., 1K 243M 2G )
\&        -k      print sizes in kilobytes(default)  
.Ve
-------------------------------
.Ip "\fIlsmod\fR" 4
lsmod 
.Sp
List the currently loaded kernel modules.
.Sp
-------------------------------
.Ip "\fImakedevs\fR" 4
makedevs \s-1NAME\s0 \s-1TYPE\s0 \s-1MAJOR\s0 \s-1MINOR\s0 \s-1FIRST\s0 \s-1LAST\s0 [s]
.Sp
Creates a range of block or character special files
.Sp
TYPEs include:
.Sp
.Vb 3
\&        b:      Make a block (buffered) device.
\&        c or u: Make a character (un-buffered) device.
\&        p:      Make a named pipe. MAJOR and MINOR are ignored for named pipes.
.Ve
\s-1FIRST\s0 specifies the number appended to \s-1NAME\s0 to create the first device.
\s-1LAST\s0 specifies the number of the last item that should be created.
If \*(L's\*(R' is the last argument, the base device is created as well.
.Sp
For example:
.Sp
.Vb 2
\&        makedevs /dev/ttyS c 4 66 2 63   ->  ttyS2-ttyS63
\&        makedevs /dev/hda b 3 0 0 8 s    ->  hda,hda1-hda8
.Ve
Example:
.Sp
.Vb 5
\&        $ makedevs /dev/ttyS c 4 66 2 63
\&        [creates ttyS2-ttyS63]
\&        $ makedevs /dev/hda b 3 0 0 8 s
\&        [creates hda,hda1-hda8]
\&         
.Ve
-------------------------------
.Ip "\fImd5sum\fR" 4
md5sum [\s-1OPTION\s0] [\s-1FILE\s0]...
or: md5sum [\s-1OPTION\s0] \fB\-c\fR [\s-1FILE\s0]
.Sp
Print or check \s-1MD5\s0 checksums.
.Sp
Options:
With no \s-1FILE\s0, or when \s-1FILE\s0 is \-, read standard input.
.Sp
.Vb 4
\&        -b      read files in binary mode
\&        -c      check MD5 sums against given list
\&        -t      read files in text mode (default)
\&        -g      read a string
.Ve
The following two options are useful only when verifying checksums:
.Sp
.Vb 2
\&        -s      don't output anything, status code shows success
\&        -w      warn about improperly formated MD5 checksum lines
.Ve
Example:
.Sp
.Vb 8
\&        $ md5sum < busybox
\&        6fd11e98b98a58f64ff3398d7b324003
\&        $ md5sum busybox
\&        6fd11e98b98a58f64ff3398d7b324003  busybox
\&        $ md5sum -c -
\&        6fd11e98b98a58f64ff3398d7b324003  busybox
\&        busybox: OK
\&        ^D
.Ve
-------------------------------
.Ip "\fImkdir\fR" 4
mkdir [\s-1OPTION\s0] \s-1DIRECTORY\s0...
.Sp
Create the \fI\s-1DIRECTORY\s0\fR\|(ies), if they do not already exist
.Sp
Options:
.Sp
.Vb 2
\&        -m      set permission mode (as in chmod), not rwxrwxrwx - umask
\&        -p      no error if existing, make parent directories as needed
.Ve
Example:
.Sp
.Vb 7
\&        $ mkdir /tmp/foo
\&        $ mkdir /tmp/foo
\&        /tmp/foo: File exists
\&        $ mkdir /tmp/foo/bar/baz
\&        /tmp/foo/bar/baz: No such file or directory
\&        $ mkdir -p /tmp/foo/bar/baz
\&         
.Ve
-------------------------------
.Ip "\fImkfifo\fR" 4
mkfifo [\s-1OPTIONS\s0] name
.Sp
Creates a named pipe (identical to \*(L'mknod name p')
.Sp
Options:
.Sp
.Vb 1
\&        -m      create the pipe using the specified mode (default a=rw)
.Ve
-------------------------------
.Ip "\fImkfs_minix\fR" 4
mkfs_minix [\fB\-c\fR | \fB\-l\fR filename] [\fB\-nXX\fR] [\fB\-iXX\fR] /dev/name [blocks]
.Sp
Make a \s-1MINIX\s0 filesystem.
.Sp
Options:
.Sp
.Vb 5
\&        -c              Check the device for bad blocks
\&        -n [14|30]      Specify the maximum length of filenames
\&        -i INODES       Specify the number of inodes for the filesystem
\&        -l FILENAME     Read the bad blocks list from FILENAME
\&        -v              Make a Minix version 2 filesystem
.Ve
-------------------------------
.Ip "\fImknod\fR" 4
mknod [\s-1OPTIONS\s0] \s-1NAME\s0 \s-1TYPE\s0 \s-1MAJOR\s0 \s-1MINOR\s0
.Sp
Create a special file (block, character, or pipe).
.Sp
Options:
.Sp
.Vb 1
\&        -m      create the special file using the specified mode (default a=rw)
.Ve
TYPEs include:
.Sp
.Vb 3
\&        b:      Make a block (buffered) device.
\&        c or u: Make a character (un-buffered) device.
\&        p:      Make a named pipe. MAJOR and MINOR are ignored for named pipes.
.Ve
Example:
.Sp
.Vb 3
\&        $ mknod /dev/fd0 b 2 0 
\&        $ mknod -m 644 /tmp/pipe p
\&         
.Ve
-------------------------------
.Ip "\fImkswap\fR" 4
mkswap [\fB\-c\fR] [\fB\-v0\fR|\fB\-v1\fR] device [block-count]
.Sp
Prepare a disk partition to be used as a swap partition.
.Sp
Options:
.Sp
.Vb 5
\&        -c              Check for read-ability.
\&        -v0             Make version 0 swap [max 128 Megs].
\&        -v1             Make version 1 swap [big!] (default for kernels >
\&                        2.1.117).
\&        block-count     Number of block to use (default is entire partition).
.Ve
-------------------------------
.Ip "\fImktemp\fR" 4
mktemp [\fB\-q\fR] \s-1TEMPLATE\s0
.Sp
Creates a temporary file with its name based on \s-1TEMPLATE\s0.
\s-1TEMPLATE\s0 is any name with six `Xs\*(R' (i.e. /tmp/temp.\s-1XXXXXX\s0).
.Sp
Example:
.Sp
.Vb 5
\&        $ mktemp /tmp/temp.XXXXXX
\&        /tmp/temp.mWiLjM
\&        $ ls -la /tmp/temp.mWiLjM
\&        -rw-------    1 andersen andersen        0 Apr 25 17:10 /tmp/temp.mWiLjM
\&         
.Ve
-------------------------------
.Ip "\fImore\fR" 4
more [\s-1FILE\s0 ...]
.Sp
More is a filter for viewing \s-1FILE\s0 one screenful at a time.
.Sp
Example:
.Sp
.Vb 2
\&        $ dmesg | more
\&         
.Ve
-------------------------------
.Ip "\fImount\fR" 4
mount [flags] device directory [\fB\-o\fR options,more-options]
.Sp
Mount a filesystem
.Sp
Flags:
.Sp
.Vb 7
\&        -a:             Mount all filesystems in fstab.
\&        -f:             Fake Add entry to mount table but don't mount it.
\&        -n:             Don't write a mount table entry.
\&        -o option:      One of many filesystem options, listed below.
\&        -r:             Mount the filesystem read-only.
\&        -t fs-type:     Specify the filesystem type.
\&        -w:             Mount for reading and writing (default).
.Ve
Options for use with the \fB\-o\fR flag:
.Sp
.Vb 8
\&        async/sync:     Writes are asynchronous / synchronous.
\&        atime/noatime:  Enable / disable updates to inode access times.
\&        dev/nodev:      Allow use of special device files / disallow them.
\&        exec/noexec:    Allow use of executable files / disallow them.
\&        loop:           Mounts a file via loop device.
\&        suid/nosuid:    Allow set-user-id-root programs / disallow them.
\&        remount:        Re-mount a mounted filesystem, changing its flags.
\&        ro/rw:          Mount for read-only / read-write.
.Ve
There are \s-1EVEN\s0 \s-1MORE\s0 flags that are specific to each filesystem.
You'll have to see the written documentation for those.
.Sp
Example:
.Sp
.Vb 7
\&        $ mount
\&        /dev/hda3 on / type minix (rw)
\&        proc on /proc type proc (rw)
\&        devpts on /dev/pts type devpts (rw)
\&        $ mount /dev/fd0 /mnt -t msdos -o ro
\&        $ mount /tmp/diskimage /opt -t ext2 -o loop
\&         
.Ve
-------------------------------
.Ip "\fImt\fR" 4
mt [\fB\-f\fR device] opcode value
.Sp
Control magnetic tape drive operation
.Sp
Available Opcodes:
.Sp
bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rew rewoffline seek setblk setdensity
setpart tell unload unlock weof wset
.Sp
-------------------------------
.Ip "\fImv\fR" 4
mv \s-1SOURCE\s0 \s-1DEST\s0
or: mv \s-1SOURCE\s0... \s-1DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST\s0, or move \fI\s-1SOURCE\s0\fR\|(s) to \s-1DIRECTORY\s0.
.Sp
Example:
.Sp
.Vb 2
\&        $ mv /tmp/foo /bin/bar
\&         
.Ve
-------------------------------
.Ip "\fInc\fR" 4
nc [\s-1IP\s0] [port] 
.Sp
Netcat opens a pipe to \s-1IP:\s0port
.Sp
Example:
.Sp
.Vb 8
\&        $ nc foobar.somedomain.com 25
\&        220 foobar ESMTP Exim 3.12 help
\&        214-Commands supported:
\&        214-    HELO EHLO MAIL RCPT DATA AUTH
\&        214     NOOP QUIT RSET HELP
\&        quit
\&        221 foobar closing connection
\&         
.Ve
-------------------------------
.Ip "\fInslookup\fR" 4
nslookup [\s-1HOST\s0]
.Sp
Queries the nameserver for the \s-1IP\s0 address of the given \s-1HOST\s0
.Sp
Example:
.Sp
.Vb 7
\&        $ nslookup localhost
\&        Server:     default
\&        Address:    default
\&        
\&        Name:       debian
\&        Address:    127.0.0.1
\&         
.Ve
-------------------------------
.Ip "\fIping\fR" 4
ping [\s-1OPTION\s0]... host
.Sp
Send \s-1ICMP\s0 \s-1ECHO_REQUEST\s0 packets to network hosts.
.Sp
Options:
.Sp
.Vb 4
\&        -c COUNT        Send only COUNT pings.
\&        -s SIZE         Send SIZE data bytes in packets (default=56).
\&        -q              Quiet mode, only displays output at start
\&                        and when finished.
.Ve
Example:
.Sp
.Vb 8
\&        $ ping localhost
\&        PING slag (127.0.0.1): 56 data bytes
\&        64 bytes from 127.0.0.1: icmp_seq=0 ttl=255 time=20.1 ms
\&        
\&        --- debian ping statistics ---
\&        1 packets transmitted, 1 packets received, 0% packet loss
\&        round-trip min/avg/max = 20.1/20.1/20.1 ms
\&         
.Ve
-------------------------------
.Ip "\fIpivot_root\fR" 4
pivot_root new_root put_old
.Sp
Move the current root file system to put_old and make new_root
the new root file system.
.Sp
-------------------------------
.Ip "\fIpoweroff\fR" 4
poweroff 
.Sp
Halt the system and request that the kernel shut off the power.
.Sp
-------------------------------
.Ip "\fIprintf\fR" 4
printf \s-1FORMAT\s0 [\s-1ARGUMENT\s0...]
.Sp
Formats and prints \fI\s-1ARGUMENT\s0\fR\|(s) according to \s-1FORMAT\s0,
Where \s-1FORMAT\s0 controls the output exactly as in C printf.
.Sp
Example:
.Sp
.Vb 4
\&        $ printf Val=%d
\&         5
\&        Val=5
\&         
.Ve
-------------------------------
.Ip "\fIps\fR" 4
ps 
.Sp
Report process status
.Sp
This version of ps accepts no options.
.Sp
Example:
.Sp
.Vb 11
\&        $ ps
\&          PID  Uid      Gid State Command
\&            1 root     root     S init
\&            2 root     root     S [kflushd]
\&            3 root     root     S [kupdate]
\&            4 root     root     S [kpiod]
\&            5 root     root     S [kswapd]
\&          742 andersen andersen S [bash]
\&          743 andersen andersen S -bash
\&          745 root     root     S [getty]
\&         2990 andersen andersen R ps
.Ve
-------------------------------
.Ip "\fIpwd\fR" 4
pwd 
.Sp
Print the full filename of the current working directory.
.Sp
Example:
.Sp
.Vb 2
\&        $ pwd
\&        /root
.Ve
-------------------------------
.Ip "\fIrdate\fR" 4
rdate [\s-1OPTION\s0] \s-1HOST\s0
.Sp
Get and possibly set the system date and time from a remote \s-1HOST\s0.
.Sp
Options:
.Sp
.Vb 2
\&        -s      Set the system date and time (default).
\&        -p      Print the date and time.
.Ve
-------------------------------
.Ip "\fIreadlink\fR" 4
readlink 
.Sp
Read a symbolic link.
.Sp
-------------------------------
.Ip "\fIreboot\fR" 4
reboot 
.Sp
Reboot the system.
.Sp
-------------------------------
.Ip "\fIrenice\fR" 4
renice priority pid [pid ...]
.Sp
Changes priority of running processes. Allowed priorities range
from 20 (the process runs only when nothing else is running) to 0
(default priority) to \fB\-20\fR (almost nothing else ever gets to run).
.Sp
-------------------------------
.Ip "\fIreset\fR" 4
reset 
.Sp
Resets the screen.
.Sp
-------------------------------
.Ip "\fIrm\fR" 4
rm [\s-1OPTION\s0]... \s-1FILE\s0...
.Sp
Remove (unlink) the \fI\s-1FILE\s0\fR\|(s).  You may use \*(L'--\*(R' to
indicate that all following arguments are non-options.
.Sp
Options:
.Sp
.Vb 3
\&        -i              always prompt before removing each destinations
\&        -f              remove existing destinations, never prompt
\&        -r or -R        remove the contents of directories recursively
.Ve
Example:
.Sp
.Vb 1
\&        $ rm -rf /tmp/foo
.Ve
-------------------------------
.Ip "\fIrmdir\fR" 4
rmdir [\s-1OPTION\s0]... \s-1DIRECTORY\s0...
.Sp
Remove the \fI\s-1DIRECTORY\s0\fR\|(ies), if they are empty.
.Sp
Example:
.Sp
-------------------------------
.Ip "\fIrmmod\fR" 4
rmmod [\s-1OPTION\s0]... [\s-1MODULE\s0]...
.Sp
Unloads the specified kernel modules from the kernel.
.Sp
Options:
.Sp
.Vb 1
\&        -a      Try to remove all unused kernel modules.
.Ve
Example:
.Sp
.Vb 1
\&        $ rmmod tulip
.Ve
-------------------------------
.Ip "\fIroute\fR" 4
route [{add|del|flush}]
.Sp
Edit the kernel's routing tables
.Sp
-------------------------------
.Ip "\fIrpmunpack\fR" 4
rpmunpack < package.rpm | gunzip | cpio \fB\-idmuv\fR
.Sp
Extracts an rpm archive.
.Sp
-------------------------------
.Ip "\fIsed\fR" 4
sed [\fB\-Vhnef\fR] pattern [files...]
.Sp
Options:
.Sp
.Vb 4
\&        -n              suppress automatic printing of pattern space
\&        -e script       add the script to the commands to be executed
\&        -f scriptfile   add the contents of script-file to the commands to be executed
\&        -h              display this help message
.Ve
If no \fB\-e\fR or \fB\-f\fR is given, the first non-option argument is taken as the
sed script to interpret. All remaining arguments are names of input
files; if no input files are specified, then the standard input is read.
.Sp
Example:
.Sp
.Vb 2
\&        $ echo foo | sed -e 's/f[a-zA-Z]o/bar/g'
\&        bar
.Ve
-------------------------------
.Ip "\fIsetkeycodes\fR" 4
setkeycodes \s-1SCANCODE\s0 \s-1KEYCODE\s0 ...
.Sp
Set entries into the kernel's scancode-to-keycode map,
allowing unusual keyboards to generate usable keycodes.
.Sp
\s-1SCANCODE\s0 may be either xx or e0xx (hexadecimal),
and \s-1KEYCODE\s0 is given in decimal
.Sp
Example:
.Sp
.Vb 1
\&        $ setkeycodes e030 127
.Ve
-------------------------------
.Ip "\fIsh\fR" 4
sh [\s-1FILE\s0]...
or: sh \fB\-c\fR command [args]...
.Sp
lash: The BusyBox LAme SHell (command interpreter)
.Sp
This command does not yet have proper documentation.
.Sp
Use lash just as you would use any other shell.  It properly handles pipes,
redirects, job control, can be used as the shell for scripts, and has a
sufficient set of builtins to do what is needed.  It does not (yet) support
Bourne Shell syntax.  If you need things like if-then-else, while, and such
use ash or bash.  If you just need a very simple and extremely small shell,
this will do the job.
.Sp
-------------------------------
.Ip "\fIsleep\fR" 4
sleep N
.Sp
Pause for N seconds.
.Sp
Example:
.Sp
.Vb 2
\&        $ sleep 2
\&        [2 second delay results]
.Ve
-------------------------------
.Ip "\fIsort\fR" 4
sort [\fB\-n\fR] [\fB\-r\fR] [\s-1FILE\s0]...
.Sp
Sorts lines of text in the specified files
.Sp
Example:
.Sp
.Vb 12
\&        $ echo -e e
\&        f
\&        b
\&        d
\&        c
\&        a | sort
\&        a
\&        b
\&        c
\&        d
\&        e
\&        f
.Ve
-------------------------------
.Ip "\fIstty\fR" 4
stty [\fB\-a\fR|g] [\fB\-F\fR device] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane.
.Sp
Options:
.Sp
.Vb 4
\&        -F device       open device instead of stdin
\&        -a              print all current settings in human-readable form
\&        -g              print in stty-readable form
\&        [SETTING]       see documentation
.Ve
-------------------------------
.Ip "\fIswapoff\fR" 4
swapoff [\s-1OPTION\s0] [device]
.Sp
Stop swapping virtual memory pages on the given device.
.Sp
Options:
.Sp
.Vb 1
\&        -a      Stop swapping on all swap devices
.Ve
-------------------------------
.Ip "\fIswapon\fR" 4
swapon [\s-1OPTION\s0] [device]
.Sp
Start swapping virtual memory pages on the given device.
.Sp
Options:
.Sp
.Vb 1
\&        -a      Start swapping on all swap devices
.Ve
-------------------------------
.Ip "\fIsync\fR" 4
sync 
.Sp
Write all buffered filesystem blocks to disk.
.Sp
-------------------------------
.Ip "\fIsyslogd\fR" 4
syslogd [\s-1OPTION\s0]...
.Sp
Linux system and kernel logging utility.
Note that this version of syslogd ignores /etc/syslog.conf.
.Sp
Options:
.Sp
.Vb 5
\&        -m NUM          Interval between MARK lines (default=20min, 0=off)
\&        -n              Run as a foreground process
\&        -O FILE         Use an alternate log file (default=/var/log/messages)
\&        -R HOST[:PORT]  Log to IP or hostname on PORT (default PORT=514/UDP)
\&        -L              Log locally and via network logging (default is network only)
.Ve
Example:
.Sp
.Vb 2
\&        $ syslogd -R masterlog:514
\&        $ syslogd -R 192.168.1.1:601
.Ve
-------------------------------
.Ip "\fItail\fR" 4
tail [\s-1OPTION\s0]... [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 to standard output.
With more than one \s-1FILE\s0, precede each with a header giving the
file name. With no \s-1FILE\s0, or when \s-1FILE\s0 is \-, read standard input.
.Sp
Options:
.Sp
.Vb 6
\&        -c N[kbm]       output the last N bytes
\&        -n N[kbm]       print last N lines instead of last 10
\&        -f              output data as the file grows
\&        -q              never output headers giving file names
\&        -s SEC          wait SEC seconds between reads with -f
\&        -v              always output headers giving file names
.Ve
If the first character of N (bytes or lines) is a \*(L'+\*(R', output begins with 
the Nth item from the start of each file, otherwise, print the last N items
in the file. N bytes may be suffixed by k (x1024), b (x512), or m (1024^2).
.Sp
Example:
.Sp
.Vb 2
\&        $ tail -n 1 /etc/resolv.conf
\&        nameserver 10.0.0.1
.Ve
-------------------------------
.Ip "\fItar\fR" 4
tar \-[cxtvO] [\-\fB\-exclude\fR File] [\fB\-X\fR File][\fB\-f\fR tarFile] [\fI\s-1FILE\s0\fR\|(s)] ...
.Sp
Create, extract, or list files from a tar file.
.Sp
Main operation mode:
.Sp
.Vb 3
\&        c               create
\&        x               extract
\&        t               list
.Ve
File selection:
.Sp
.Vb 4
\&        f               name of tarfile or - for stdin
\&        O               extract to stdout
\&        exclude         file to exclude
\&        X               file with names to exclude
.Ve
Informative output:
.Sp
.Vb 1
\&        v               verbosely list files processed
.Ve
Example:
.Sp
.Vb 2
\&        $ zcat /tmp/tarball.tar.gz | tar -xf -
\&        $ tar -cf /tmp/tarball.tar /usr/local
.Ve
-------------------------------
.Ip "\fItee\fR" 4
tee [\s-1OPTION\s0]... [\s-1FILE\s0]...
.Sp
Copy standard input to each \s-1FILE\s0, and also to standard output.
.Sp
Options:
.Sp
.Vb 1
\&        -a      append to the given FILEs, do not overwrite
.Ve
Example:
.Sp
.Vb 3
\&        $ echo Hello | tee /tmp/foo
\&        $ cat /tmp/foo
\&        Hello
.Ve
-------------------------------
.Ip "\fItelnet\fR" 4
telnet host [port]
.Sp
Telnet is used to establish interactive communication with another
computer over a network using the \s-1TELNET\s0 protocol.
.Sp
-------------------------------
.Ip "\fItest\fR" 4
test \s-1EXPRESSION\s0
  or   [ \s-1EXPRESSION\s0 ]
.Sp
Checks file types and compares values returning an exit
code determined by the value of \s-1EXPRESSION\s0.
.Sp
Example:
.Sp
.Vb 12
\&        $ test 1 -eq 2
\&        $ echo $?
\&        1
\&        $ test 1 -eq 1
\&        $ echo $? 
\&        0
\&        $ [ -d /etc ]
\&        $ echo $?
\&        0
\&        $ [ -d /junk ]
\&        $ echo $?
\&        1
.Ve
-------------------------------
.Ip "\fItftp\fR" 4
tftp command \s-1SOURCE\s0 \s-1DEST\s0
.Sp
Transfers a file from/to a tftp server using octet mode.
.Sp
Commands:
.Sp
.Vb 2
\&        get     Get file from server SOURCE and store to local DEST.
\&        put     Put local file SOURCE to server DEST.
.Ve
When nameing a server, use the syntax server:file.
.Sp
-------------------------------
.Ip "\fItouch\fR" 4
touch [\fB\-c\fR] file [file ...]
.Sp
Update the last-modified date on the given file[s].
.Sp
Options:
.Sp
.Vb 1
\&        -c      Do not create any files
.Ve
Example:
.Sp
.Vb 6
\&        $ ls -l /tmp/foo
\&        /bin/ls: /tmp/foo: No such file or directory
\&        $ touch /tmp/foo
\&        $ ls -l /tmp/foo
\&        -rw-rw-r--    1 andersen andersen        0 Apr 15 01:11 /tmp/foo
\&         
.Ve
-------------------------------
.Ip "\fItr\fR" 4
tr [\fB\-cds\fR] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, and/or delete characters from
standard input, writing to standard output.
.Sp
Options:
.Sp
.Vb 3
\&        -c      take complement of STRING1
\&        -d      delete input characters coded STRING1
\&        -s      squeeze multiple output characters of STRING2 into one character
.Ve
Example:
.Sp
.Vb 3
\&        $ echo gdkkn vnqkc | tr [a-y] [b-z]
\&        hello world
\&         
.Ve
-------------------------------
.Ip "\fItrue\fR" 4
true 
.Sp
Return an exit code of \s-1TRUE\s0 (0).
.Sp
Example:
.Sp
.Vb 3
\&        $ true
\&        $ echo $?
\&        0
.Ve
-------------------------------
.Ip "\fItty\fR" 4
tty 
.Sp
Print the file name of the terminal connected to standard input.
.Sp
Options:
.Sp
.Vb 1
\&        -s      print nothing, only return an exit status
.Ve
Example:
.Sp
.Vb 2
\&        $ tty
\&        /dev/tty2
.Ve
-------------------------------
.Ip "\fIumount\fR" 4
umount [flags] filesystem|directory
.Sp
Unmount file systems
.Sp
Flags:
.Sp
.Vb 5
\&        -a:     Unmount all file systems in /etc/mtab
\&        -n:     Don't erase /etc/mtab entries
\&        -r:     Try to remount devices as read-only if mount is busy
\&        -f:     Force filesystem umount (i.e. unreachable NFS server)
\&        -l:     Do not free loop device (if a loop device has been used)
.Ve
Example:
.Sp
.Vb 1
\&        $ umount /dev/hdc1 
.Ve
-------------------------------
.Ip "\fIuname\fR" 4
uname [\s-1OPTION\s0]...
.Sp
Print certain system information.  With no \s-1OPTION\s0, same as \fB\-s\fR.
.Sp
Options:
.Sp
.Vb 7
\&        -a      print all information
\&        -m      the machine (hardware) type
\&        -n      print the machine's network node hostname
\&        -r      print the operating system release
\&        -s      print the operating system name
\&        -p      print the host processor type
\&        -v      print the operating system version
.Ve
Example:
.Sp
.Vb 2
\&        $ uname -a
\&        Linux debian 2.2.15pre13 
.Ve
-------------------------------
.Ip "\fIuniq\fR" 4
uniq [\s-1OPTION\s0]... [\s-1INPUT\s0 [\s-1OUTPUT\s0]]
.Sp
Discard all but one of successive identical lines from \s-1INPUT\s0
(or standard input), writing to \s-1OUTPUT\s0 (or standard output).
.Sp
Options:
.Sp
.Vb 3
\&        -c      prefix lines by the number of occurrences
\&        -d      only print duplicate lines
\&        -u      only print unique lines
.Ve
Example:
.Sp
.Vb 9
\&        $ echo -e a
\&        a
\&        b
\&        c
\&        c
\&        a | sort | uniq
\&        a
\&        b
\&        c
.Ve
-------------------------------
.Ip "\fIunix2dos\fR" 4
unix2dos [option] [file]
.Sp
See \*(L'dos2unix \-\fB\-help\fR\*(R' for help!
.Sp
-------------------------------
.Ip "\fIupdate\fR" 4
update [options]
.Sp
Periodically flushes filesystem buffers.
.Sp
Options:
.Sp
.Vb 3
\&        -S      force use of sync(2) instead of flushing
\&        -s SECS call sync this often (default 30)
\&        -f SECS flush some buffers this often (default 5)
.Ve
-------------------------------
.Ip "\fIuptime\fR" 4
uptime 
.Sp
Display the time since the last boot.
.Sp
Example:
.Sp
.Vb 3
\&        $ uptime
\&          1:55pm  up  2:30, load average: 0.09, 0.04, 0.00
\&         
.Ve
-------------------------------
.Ip "\fIusleep\fR" 4
usleep N 
.Sp
Pause for N microseconds.
.Sp
Example:
.Sp
.Vb 2
\&        $ usleep 1000000
\&        [pauses for 1 second]
.Ve
-------------------------------
.Ip "\fIuudecode\fR" 4
uudecode [\s-1FILE\s0]...
.Sp
Uudecode a file that is uuencoded.
.Sp
Options:
.Sp
.Vb 4
\&        -o FILE direct output to FILE$ uudecode -o busybox busybox.uu
\&$ ls B<-l> busybox
\&B<-rwxr>-xr-x   1 ams      ams        245264 Jun  7 21:35 busybox
\& 
.Ve
-------------------------------
.Ip "\fIuuencode\fR" 4
uuencode [\s-1OPTION\s0] [\s-1INFILE\s0] \s-1REMOTEFILE\s0
.Sp
Uuencode a file.
.Sp
Options:
.Sp
.Vb 1
\&        -m      use base64 encoding as of RFC1521
.Ve
Example:
.Sp
.Vb 5
\&        $ uuencode busybox busybox
\&        begin 755 busybox
\&        <encoded file snipped>
\&        $ uudecode busybox busybox > busybox.uu
\&        $
.Ve
-------------------------------
.Ip "\fIwatchdog\fR" 4
watchdog \s-1DEV\s0
.Sp
Periodically write to watchdog device \s-1DEV\s0
.Sp
-------------------------------
.Ip "\fIwc\fR" 4
wc [\s-1OPTION\s0]... [\s-1FILE\s0]...
.Sp
Print line, word, and byte counts for each \s-1FILE\s0, and a total line if
more than one \s-1FILE\s0 is specified.  With no \s-1FILE\s0, read standard input.
.Sp
Options:
.Sp
.Vb 4
\&        -c      print the byte counts
\&        -l      print the newline counts
\&        -L      print the length of the longest line
\&        -w      print the word counts
.Ve
Example:
.Sp
.Vb 3
\&        $ wc /etc/passwd
\&             31      46    1365 /etc/passwd
\&         
.Ve
-------------------------------
.Ip "\fIwget\fR" 4
wget [\fB\-c\fR] [\fB\-O\fR file] url
.Sp
wget retrieves files via \s-1HTTP\s0
.Sp
Options:
.Sp
.Vb 2
\&        -c      continue retrieval of aborted transfers
\&        -O      save to filename ('-' for stdout)
.Ve
-------------------------------
.Ip "\fIwhich\fR" 4
which [\s-1COMMAND\s0 ...]
.Sp
Locates a \s-1COMMAND\s0.
.Sp
Example:
.Sp
.Vb 2
\&        $ which login
\&        /bin/login
.Ve
-------------------------------
.Ip "\fIwhoami\fR" 4
whoami 
.Sp
Prints the user name associated with the current effective user id.
.Sp
-------------------------------
.Ip "\fIxargs\fR" 4
xargs [\s-1COMMAND\s0] [\s-1ARGS\s0...]
.Sp
Executes \s-1COMMAND\s0 on every item given by standard input.
.Sp
Example:
.Sp
.Vb 3
\&        $ ls | xargs gzip
\&        $ find . -name '*.c' -print | xargs rm
\&         
.Ve
-------------------------------
.Ip "\fIyes\fR" 4
yes [\s-1OPTION\s0]... [\s-1STRING\s0]...
.Sp
Repeatedly outputs a line with all specified \fI\s-1STRING\s0\fR\|(s), or \*(L'y\*(R'.
.Sp
-------------------------------
.Ip "\fIzcat\fR" 4
zcat \s-1FILE\s0
.Sp
Uncompress to stdout.
.Sp
-------------------------------
.SH "LIBC NSS"
GNU Libc uses the Name Service Switch (NSS) to configure the behavior of the C
library for the local environment, and to configure how it reads system data,
such as passwords and group information.  BusyBox has made it Policy that it
will never use NSS, and will never use and libc calls that make use of NSS.
This allows you to run an embedded system without the need for installing an
/etc/nsswitch.conf file and without and /lib/libnss_* libraries installed.
.PP
If you are using a system that is using a remote LDAP server for authentication
via GNU libc NSS, and you want to use BusyBox, then you will need to adjust the
BusyBox source.  Chances are though, that if you have enough space to install
of that stuff on your system, then you probably want the full GNU utilities.
.SH "SEE ALSO"
\fItextutils\fR\|(1), \fIshellutils\fR\|(1), etc...
.SH "MAINTAINER"
Erik Andersen <andersee@debian.org> <andersen@lineo.com>
.SH "AUTHORS"
The following people have contributed code to BusyBox whether
they know it or not.
.PP
Erik Andersen <andersen@lineo.com>, <andersee@debian.org>
.PP
.Vb 2
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
.Ve
Edward Betts <edward@debian.org>
.PP
.Vb 3
\&    expr, hostid, logname, tty, wc, whoami, yes
\& 
\&=for html <br>
.Ve
John Beppu <beppu@lineo.com>
.PP
.Vb 1
\&    du, head, nslookup, sort, tee, uniq
.Ve
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny-ls(ls)
.Ve
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname, and mkfifo
.Ve
Dave Cinege <dcinege@psychosis.com>	
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file, 
\&    various fixes, Linux Router Project maintenance
.Ve
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
Matt Kraai <kraai@alumni.carnegiemellon.edu>
.PP
.Vb 1
\&    documentation, bugfixes
.Ve
John Lombardo <john@deltanet.com>	
.PP
.Vb 1
\&    dirname, tr
.Ve
Glenn McGrath <bug1@netconnect.com.au>
.PP
.Vb 1
\&    ar.c
.Ve
Bruce Perens <bruce@pixar.com>
.PP
.Vb 1
\&    Original author of BusyBox. His code is still in many apps.
.Ve
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget - Contributed by permission of Covad Communications
.Ve
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
Gyepi Sam <gyepi@praxis-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
Mark Whitley <markw@lineo.com>
.PP
.Vb 1
\&    sed remix, bug fixes, style-guide, etc.
.Ve
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini-netcat(nc)
.Ve
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve

.rn }` ''
.IX Title "BUSYBOX 1"
.IX Name "BusyBox - The Swiss Army Knife of Embedded Linux"

.IX Header "NAME"

.IX Header "SYNTAX"

.IX Header "DESCRIPTION"

.IX Header "USAGE"

.IX Header "COMMON OPTIONS"

.IX Header "COMMANDS"

.IX Item "\fIar\fR"

.IX Item "\fIbasename\fR"

.IX Item "\fIcat\fR"

.IX Item "\fIchgrp\fR"

.IX Item "\fIchmod\fR"

.IX Item "\fIchown\fR"

.IX Item "\fIchroot\fR"

.IX Item "\fIchvt\fR"

.IX Item "\fIclear\fR"

.IX Item "\fIcmp\fR"

.IX Item "\fIcp\fR"

.IX Item "\fIcut\fR"

.IX Item "\fIdate\fR"

.IX Item "\fIdc\fR"

.IX Item "\fIdd\fR"

.IX Item "\fIdeallocvt\fR"

.IX Item "\fIdf\fR"

.IX Item "\fIdirname\fR"

.IX Item "\fIdmesg\fR"

.IX Item "\fIdos2unix\fR"

.IX Item "\fIdpkg\fR"

.IX Item "\fIdpkg_deb\fR"

.IX Item "\fIdu\fR"

.IX Item "\fIdumpkmap\fR"

.IX Item "\fIdutmp\fR"

.IX Item "\fIecho\fR"

.IX Item "\fIexpr\fR"

.IX Item "\fIfalse\fR"

.IX Item "\fIfbset\fR"

.IX Item "\fIfdflush\fR"

.IX Item "\fIfind\fR"

.IX Item "\fIfree\fR"

.IX Item "\fIfreeramdisk\fR"

.IX Item "\fIfsck_minix\fR"

.IX Item "\fIgetopt\fR"

.IX Item "\fIgrep\fR"

.IX Item "\fIgunzip\fR"

.IX Item "\fIgzip\fR"

.IX Item "\fIhalt\fR"

.IX Item "\fIhead\fR"

.IX Item "\fIhostid\fR"

.IX Item "\fIhostname\fR"

.IX Item "\fIid\fR"

.IX Item "\fIifconfig\fR"

.IX Item "\fIinit\fR"

.IX Item "\fIinsmod\fR"

.IX Item "\fIkill\fR"

.IX Item "\fIkillall\fR"

.IX Item "\fIklogd\fR"

.IX Item "\fIlength\fR"

.IX Item "\fIln\fR"

.IX Item "\fIloadacm\fR"

.IX Item "\fIloadfont\fR"

.IX Item "\fIloadkmap\fR"

.IX Item "\fIlogger\fR"

.IX Item "\fIlogname\fR"

.IX Item "\fIlogread\fR"

.IX Item "\fIls\fR"

.IX Item "\fIlsmod\fR"

.IX Item "\fImakedevs\fR"

.IX Item "\fImd5sum\fR"

.IX Item "\fImkdir\fR"

.IX Item "\fImkfifo\fR"

.IX Item "\fImkfs_minix\fR"

.IX Item "\fImknod\fR"

.IX Item "\fImkswap\fR"

.IX Item "\fImktemp\fR"

.IX Item "\fImore\fR"

.IX Item "\fImount\fR"

.IX Item "\fImt\fR"

.IX Item "\fImv\fR"

.IX Item "\fInc\fR"

.IX Item "\fInslookup\fR"

.IX Item "\fIping\fR"

.IX Item "\fIpivot_root\fR"

.IX Item "\fIpoweroff\fR"

.IX Item "\fIprintf\fR"

.IX Item "\fIps\fR"

.IX Item "\fIpwd\fR"

.IX Item "\fIrdate\fR"

.IX Item "\fIreadlink\fR"

.IX Item "\fIreboot\fR"

.IX Item "\fIrenice\fR"

.IX Item "\fIreset\fR"

.IX Item "\fIrm\fR"

.IX Item "\fIrmdir\fR"

.IX Item "\fIrmmod\fR"

.IX Item "\fIroute\fR"

.IX Item "\fIrpmunpack\fR"

.IX Item "\fIsed\fR"

.IX Item "\fIsetkeycodes\fR"

.IX Item "\fIsh\fR"

.IX Item "\fIsleep\fR"

.IX Item "\fIsort\fR"

.IX Item "\fIstty\fR"

.IX Item "\fIswapoff\fR"

.IX Item "\fIswapon\fR"

.IX Item "\fIsync\fR"

.IX Item "\fIsyslogd\fR"

.IX Item "\fItail\fR"

.IX Item "\fItar\fR"

.IX Item "\fItee\fR"

.IX Item "\fItelnet\fR"

.IX Item "\fItest\fR"

.IX Item "\fItftp\fR"

.IX Item "\fItouch\fR"

.IX Item "\fItr\fR"

.IX Item "\fItrue\fR"

.IX Item "\fItty\fR"

.IX Item "\fIumount\fR"

.IX Item "\fIuname\fR"

.IX Item "\fIuniq\fR"

.IX Item "\fIunix2dos\fR"

.IX Item "\fIupdate\fR"

.IX Item "\fIuptime\fR"

.IX Item "\fIusleep\fR"

.IX Item "\fIuudecode\fR"

.IX Item "\fIuuencode\fR"

.IX Item "\fIwatchdog\fR"

.IX Item "\fIwc\fR"

.IX Item "\fIwget\fR"

.IX Item "\fIwhich\fR"

.IX Item "\fIwhoami\fR"

.IX Item "\fIxargs\fR"

.IX Item "\fIyes\fR"

.IX Item "\fIzcat\fR"

.IX Header "LIBC NSS"

.IX Header "SEE ALSO"

.IX Header "MAINTAINER"

.IX Header "AUTHORS"

